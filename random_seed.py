import random
import numpy as np

""" Генерация случайных чисел на самом деле не является "случайной".
    Она детерминирована, Генераторы псевдослучайных чисел работают путем выполнения некоторой операции над
    предыдущим значением, при первом использовании генератора предыдущего значения нет.
    Можно определить начальное значение и передать  в random.seed. 
    Обычно вы просто вызываете random.seed(), и он использует текущее время в качестве начального значения,
    что означает, что всякий раз, когда вы запускаете скрипт, вы получаете другую последовательность значений."""
n = 0
while n < 10:
    n += 1
    # random.seed()
    # print(" \t" * 2, random.random())
    # print(random.randint(1, 3))
    random.seed(1)
    print(random.random())
    # print(" \t" ,random.randint(1,10))
    print(" \t" * 5, random.random(), "seed")

# Генератор случайных чисел в заданном диапазоне и в нужном кол-ве
r = lambda x, y: random.randint(x, y)
print(
    [r(10, 30) for _ in range(5)],
    " Генератор случайных чисел в заданном диапазоне и в  нужном кол-ве",
)

print([random.randint(10, 80) for _ in range(5)], " то же самое без lambda")

#  Генератор случайных чисел в заданном диапазоне, с заданным шагом и в нужном кол-ве
print(
    [(lambda x, y, z: random.randrange(x, y, z))(10, 100, 20) for _ in range(5)],
    " Генератор случайных чисел "
    "в заданном диапазоне, с заданным шагом и в  нужном кол-ве",
)
#  Генератор случайных чисел в заданном диапазоне, с заданным шагом и в нужном кол-ве
print(
    [random.randrange(10, 100, 20) for _ in range(5)],
    " #  Генератор случайных чисел в заданном диапазоне, "
    "с заданным шагом и в нужном кол-ве без lambda",
    "\n",
)

# Генератор случайных чисел через случайный индекс
print(
    [_ for _ in range(10)][np.random.randint(0, 9)],
    "- Генератор случайных чисел через случайный индекс",
    "\n",
)

# Генератор случайных чисел через numpy классс  Generator экземпляр default_rng
rng = np.random.default_rng()
print(
    rng.integers(10, size=10)[0],
    "- Генератор случайных чисел через numpy классс  Generator экземпляр default_rng",
    "\n",
)

# random.sample - выводим ОБ из списка в заданном кол-ве в произвольном порядке при условии нового вызова
lst = [
    1,
    14,
    0,
    4,
    52,
    1,
    3,
    5,
    3,
    5,
    10,
]
b = random.sample(lst, 5)
c = random.sample(lst, 5)
print(
    b,
    c,
    "random.sample - выводим ОБ из списка в заданном кол-ве в произвольном порядке при условии нового вызова",
    "\n",
)

# random.shuffle - перемешивание списка
g = [
    1,
    14,
    0,
    4,
    52,
    1,
    3,
    5,
    3,
    5,
    10,
]
random.shuffle(g)
print(g, " # random.shuffle - перемешивание списка", "\n")

# random.seed - устанавливает начальное число из которого вычисляется ПСЕВДОслучайная последовательность, если
# число одно и тоже то и random последовательность повторяется
random.seed(0)  # 1й вариант последовательности
# random.seed(2)  # 2й вариант последовательности
# random.seed(3)  # 3й вариант последовательности
# random.seed(4)  # 4й вариант последовательности
a = [random.randint(0, 20) for _ in range(10)]
b = [random.randint(0, 20) for _ in range(10)]
print(
    a,
    b,
    "устанавливает начальное число из которого вычисляется ПСЕВДОслучайная последовательность, если"
    "число одно и тоже то и random последовательность повторяется ",
    "\n",
)


# np.random.seed(1)
np.random.seed(0)
b = np.array([random.randint(0, 20) for _ in range(10)])
t = np.array([random.randint(0, 20) for _ in range(10)])
print(b, t, "random.seed", "\n")

# random.sample - возвр. копию случайно выбранных ОБ из коллекции, counts=[1, 2, 3] - ко-во повторных выборов кажд. ОБ
print(
    random.sample(["red", "blue", "yellow"], counts=[1, 2, 3], k=6),
    "random.sample - возвр. копию случайно " "выбранных ОБ из коллекции",
    "\n",
)
